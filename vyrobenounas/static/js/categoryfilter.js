// Generated by CoffeeScript 1.4.0
(function() {
  var $, Group, Item, debug, log, normalize,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  if (typeof debug === "undefined" || debug === null) {
    debug = false;
  }

  if (typeof log === "undefined" || log === null) {
    log = function(msg) {
      if (debug) {
        if (typeof console !== "undefined" && console !== null) {
          console.log(msg);
        }
      }
      if (debug) {
        return typeof opera !== "undefined" && opera !== null ? opera.postError(args) : void 0;
      }
    };
  }

  normalize = function(text) {
    return text.toLowerCase().replace(/\s+/g, '');
  };

  Item = (function() {

    function Item(elem) {
      this.elem = elem;
      this.a = this.elem.children('a');
      this.text = normalize(this.a.text());
      log(this.toString());
    }

    Item.prototype.matches = function(query) {
      return this.text.indexOf(query) !== -1;
    };

    Item.prototype.show = function() {
      this.elem.show(500);
      return this.elem.removeClass("categorylist__hidden");
    };

    Item.prototype.hide = function() {
      this.elem.hide(500);
      return this.elem.addClass("categorylist__hidden");
    };

    Item.prototype.toString = function() {
      return "Item: " + this.text;
    };

    return Item;

  })();

  Group = (function(_super) {

    __extends(Group, _super);

    function Group(elem) {
      var li,
        _this = this;
      this.elem = elem;
      Group.__super__.constructor.call(this, this.elem);
      this.group = this.elem.children('ul');
      this.items = (function() {
        var _i, _len, _ref, _results;
        _ref = this.group.children('li');
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          li = _ref[_i];
          _results.push(new Item($(li)));
        }
        return _results;
      }).call(this);
      this.itemCount = this.items.length;
      this.a.on("click", function(event) {
        log(_this.text + " clicked");
        return _this.toggle();
      });
    }

    Group.prototype.update = function(query) {
      var hidden, item, _i, _len, _ref;
      hidden = 0;
      _ref = this.items;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        item = _ref[_i];
        if (item.matches(query)) {
          item.show();
        } else {
          item.hide();
          hidden += 1;
        }
      }
      if (this.itemCount === hidden) {
        return this.hide();
      } else {
        return this.show();
      }
    };

    Group.prototype.toggled = function() {
      return this.elem.hasClass("categorylist__toggled");
    };

    Group.prototype.toggle = function() {
      if (!this.toggled) {
        return this.group.hide(500);
      } else {
        return this.group.show(500);
      }
    };

    Group.prototype.toString = function() {
      return "Group: " + this.text;
    };

    return Group;

  })(Item);

  $ = jQuery;

  $.fn.extend({
    categoryList: function(options) {
      var group, groups, settings;
      settings = {
        searchInputId: 'category-search',
        hiddenClass: 'categorylist__hidden',
        toggledClass: 'categorylist__toggled',
        highlightClass: 'index-search-highlight'
      };
      settings = $.extend(settings, options);
      log("indexSearch loaded");
      return groups = [
        (function() {
          var _i, _len, _ref, _results;
          _ref = $(this).children("li");
          _results = [];
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            group = _ref[_i];
            _results.push(Group($(group)));
          }
          return _results;
        }).call(this)
      ];
    }
  });

}).call(this);
